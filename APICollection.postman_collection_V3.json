{
	"info": {
		"_postman_id": "624f8041-ae19-455b-a422-b8574ce1af9d",
		"name": "APICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27862171"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// CARRY OUT VERIFICATION OF RESPONSES AND VALIDTION OF DATA WHEN RUNNING API TESTS \r",
									"\r",
									"\r",
									"/**\r",
									"  \r",
									" \r",
									" ************************** LET'S BEGIN ************************************\r",
									"\r",
									"\r",
									"*/\r",
									"\r",
									"\r",
									"// lesson 8A - Extracting Response on API\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.links[4].rel);\r",
									"console.log(jsonData.links[5].href);\r",
									"pm.environment.set(\"LinksRel\", jsonData.links[4].rel);\r",
									"pm.environment.set(\"LinksHref\",jsonData.links[5].href);\r",
									"\r",
									"// Checking if the URL actually returns a response; check for 200 successful response\r",
									"\r",
									"/// beginning of work FOR LESSON 7A & 7B\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the status has an OK string name\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// variable jsonData to print out the response in json format\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									" /** \r",
									" // print value of apiVersion in the GET request\r",
									" // to print everything in the body response; type console.log(jsonData) \r",
									" // to print out only the value in apiVersion, use the below\r",
									" */\r",
									"\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.apiVersion)\r",
									"\r",
									"// below prints out the specific value in the links array and then the 2nd array.....so it is rel inside 2 inside links ; result should be documentation.\r",
									"\r",
									"console.log(jsonData.links[2].rel) \r",
									" \r",
									"\r",
									"// Confirm expected value and actual value using below ; Method 1 (best applicable) because it drills down your search to a specific field in the response \r",
									"\r",
									"// value; TEST 1, to check if it matches the value i am looking for\r",
									"// check if apiVersion is equal to what is in the DB\r",
									"\r",
									"pm.test(\"Confirm that the apiVersion is 6.3.8.0\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"// value; TEST 2, to check if it matches what i am looking for in the \"rel\" array\r",
									"// Check if links with rel: documentation is present\r",
									"\r",
									"pm.test(\"Confirm that documentation is present\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"\r",
									"// Below method but did not work and is not applicable because the above is an array. Learn more on Javascript\r",
									"/**\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(jsonData.apiVersion);\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"// Below Method only applicable if you want to search the whole body randomly for a value, it does not narrow/drill down your search\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// CHECKING THROUGH THE STANDARD TEST CASE ; API TESTCASES\r",
									"\r",
									"// confirm documentation is present\r",
									"\r",
									"pm.test(\"Confirm that documentation is present\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"\r",
									"// confirm that the links with number 1 is equal to openapi. \r",
									"\r",
									"console.log(jsonData.links[1].rel)\r",
									"\r",
									"\r",
									"// Verify that the ID of link with rel:jsonrpc is equal to 5\r",
									"\r",
									"console.log(jsonData.links[5].rel)\r",
									"\r",
									"// check again to validate the above is equal to 5\r",
									"\r",
									"pm.test(\"Confirm that the jsonrpc is 5\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[5].rel).to.eql(\"jsonrpc\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"// CARRY OUT VERIFICATION OF RESPONSES AND VALIDTION OF DATA WHEN RUNNING API TESTS \r",
									"\r",
									"\r",
									"/**\r",
									"  \r",
									" \r",
									" ************************** LET'S BEGIN ************************************\r",
									"\r",
									"\r",
									"*/\r",
									"// Extracting Response on API\r",
									"// lesson 8A \r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.links[4].rel);\r",
									"console.log(jsonData.links[5].href);\r",
									"pm.environment.set(\"LinksRel\", jsonData.links[4].rel);\r",
									"pm.environment.set(\"LinksHref\",jsonData.links[5].href);\r",
									"\r",
									"\r",
									"// Checking if the URL actually returns a response; check for 200 successful response\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if the status has an OK string name\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// variable jsonData to print out the response in json format\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"\r",
									" /** \r",
									" // print value of apiVersion in the GET request\r",
									" // to print everything in the body response; type console.log(jsonData) \r",
									" // to print out only the value in apiVersion, use the below\r",
									" */\r",
									"\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.apiVersion)\r",
									"\r",
									"// below prints out the specific value in the links array and then the 2nd array.....so it is rel inside 2 inside links ; result should be documentation.\r",
									"\r",
									"console.log(jsonData.links[2].rel) \r",
									" \r",
									"\r",
									"// Confirm expected value and actual value using below ; Method 1 (best applicable) because it drills down your search to a specific field in the response \r",
									"\r",
									"// value; TEST 1, to check if it matches the value i am looking for\r",
									"// check if apiVersion is equal to what is in the DB\r",
									"\r",
									"pm.test(\"Confirm that the apiVersion is 6.3.8.0\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"\r",
									"// value; TEST 2, to check if it matches what i am looking for in the \"rel\" array\r",
									"// Check if links with rel: documentation is present\r",
									"\r",
									"pm.test(\"Confirm that documentation is present\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"\r",
									"// Below method but did not work and is not applicable because the above is an array. Learn more on Javascript\r",
									"/**\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(jsonData.apiVersion);\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"// Below Method only applicable if you want to search the whole body randomly for a value, it does not narrow/drill down your search\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// CHECKING THROUGH THE STANDARD TEST CASE ; API TESTCASES\r",
									"\r",
									"// confirm documentation is present\r",
									"\r",
									"pm.test(\"Confirm that documentation is present\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"\r",
									"// confirm that the links with number 1 is equal to openapi. \r",
									"\r",
									"console.log(jsonData.links[1].rel)\r",
									"\r",
									"\r",
									"// Verify that the ID of link with rel:jsonrpc is equal to 5\r",
									"\r",
									"console.log(jsonData.links[5].rel)\r",
									"\r",
									"// check again to validate the above is equal to 5\r",
									"\r",
									"pm.test(\"Confirm that the jsonrpc is 5\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.links[5].rel).to.eql(\"jsonrpc\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "todo",
								"value": "2",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}?todo_id={{LinksHref}}",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "todo_id",
									"value": "{{LinksHref}}"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}?todo_id=1000000",
							"host": [
								"{{base_url}}"
							],
							"query": [
								{
									"key": "todo_id",
									"value": "1000000"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books - valid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url2}}/books",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - invalid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url2}}/books",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using valid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}",
							"host": [
								"{{base_url2}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using no book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using a valid order number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using an invalid order number",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using no order ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order - using invalid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using valid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ffca71810c563450a6bf01d67e1ffd6925b9e0393b721fc6e26ed0ee39d54c5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}